/********************************************************************************
	Author:	Kyle T Newton
	E-Mail: Kylenewton172@gmail.com
	Last Modified: January 27, 2015

	
	TicTacToeGUI
	
	This program will create a Tic Tac Toe GUI that displays a window with two radio
	buttons that the user can pick to create a custom or standard game of tictactoe
**********************************************************************************/

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.stage.Stage;
import javafx.stage.Modality;
import javafx.scene.control.Label;
import javafx.scene.control.Button;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TextField;
import javafx.scene.control.TextArea;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.BorderPane;
import javafx.event.EventHandler;
import javafx.event.ActionEvent;

public class TicTacToeGUI extends Application {
	
	//create content for my first stage
	private Label standardGameLabel;
	private Label customGameLabel;
	private RadioButton standardGameRadioButton;
	private RadioButton customGameRadioButton;
	private Button acceptButton;
	private Button exitButton;
	private GridPane radioButtonPane;
	private BorderPane mainPane;
	private FlowPane buttonPane;
	private TicTacToeGrid standardGrid;
	private TicTacToeGrid customGrid;
	
	//create content for the custom game stage 
	private GridPane inputPane;
	private BorderPane customStagePane;
	private FlowPane customButtonPane;
	
	private Stage customGameStage;
	private Scene customGameScene;
	
	private Button okButton;
	private Button cancelButton;
	private TextField gridSizeTextField;
	private TextField characterOneTextField;
	private TextField characterTwoTextField;
	private Label gridSizeLabel;
	private Label characterOneLabel;
	private Label characterTwoLabel;
	private TextArea errorTextArea;
	
	//create the variables for user input
	private int gridSizeInput;
	private char playerOneChosenCharacter;
	private char playerTwoChosenCharacter;
	
	
	public void start(Stage primaryStage) {
		setup(primaryStage);
		
		
	}//end of start()
	
	public void setup(Stage primaryStage) {
		
		standardGameLabel = new Label("Standard Game");
		customGameLabel = new Label("Custom Game");
		standardGameRadioButton = new RadioButton();
		customGameRadioButton = new RadioButton();
		standardGrid = new TicTacToeGrid();
		
		
		radioButtonPane = new GridPane();
		radioButtonPane.add(standardGameLabel, 0, 0);
		radioButtonPane.add(standardGameRadioButton, 1, 0);
		radioButtonPane.add(customGameLabel, 0, 1);
		radioButtonPane.add(customGameRadioButton, 1, 1);
		
		acceptButton = new Button("Accept");
		exitButton = new Button("Exit");
		
		//create my second stage for the custom game
		customGameStage = new Stage();
		gridSizeLabel = new Label("Please enter a grid size that is less than 10");
		characterOneLabel = new Label("Please enter player one's character");
		characterTwoLabel = new Label("Please enter player two's character");
		gridSizeTextField = new TextField();
		characterOneTextField = new TextField();
		characterTwoTextField = new TextField();
		errorTextArea = new TextArea();
		
		inputPane = new GridPane();
		inputPane.add(gridSizeLabel, 0, 0);
		inputPane.add(gridSizeTextField, 0, 1);
		inputPane.add(characterOneLabel, 1, 0);
		inputPane.add(characterOneTextField, 1, 1);
		inputPane.add(characterTwoLabel, 2, 0);
		inputPane.add(characterTwoTextField, 2, 1);
		
		customButtonPane = new FlowPane();
		okButton = new Button("OK");
		cancelButton = new Button("Cancel");
		customButtonPane.getChildren().add(okButton);
		customButtonPane.getChildren().add(cancelButton);
		
		customStagePane = new BorderPane();
		customStagePane.setTop(errorTextArea);
		customStagePane.setCenter(inputPane);
		customStagePane.setBottom(customButtonPane);
		
		customGameScene = new Scene(customStagePane, 300, 400);
		customGameStage.setScene(customGameScene);
		customGameStage.initModality(Modality.APPLICATION_MODAL);
		
		//set my acceptButton to work with an anonymous handler and determine what to do
		acceptButton.setOnAction(ae -> {
									if (customGameRadioButton.isSelected() == true) {
										gridSizeTextField.requestFocus();
										customGameStage.showAndWait();
									}
									else if (standardGameRadioButton.isSelected() == true) {
										standardGrid.show();
									}
								});
		exitButton.setOnAction(ae -> {
									System.exit(0);
								});
		
		
		//create my okButton handler and create the custom grid with the custom characters
		okButton.setOnAction(ae -> {
								if (Integer.parseInt(gridSizeTextField.getText()) <= 9) {
									gridSizeInput = Integer.parseInt(gridSizeTextField.getText());
									playerOneChosenCharacter = characterOneTextField.getText().charAt(0);
									playerTwoChosenCharacter = characterTwoTextField.getText().charAt(0);
									customGrid = new TicTacToeGrid(gridSizeInput, playerOneChosenCharacter, playerTwoChosenCharacter);
									customGrid.show();
								}
								else {
									errorTextArea.appendText("please enter a grid size less than or equal too 9");
								}
							});
		//create my cancel button to act like a clear button and then set the focus on the grid size field
		cancelButton.setOnAction(ae -> {
									characterOneTextField.setText("");
									characterTwoTextField.setText("");
									gridSizeTextField.setText("");
									errorTextArea.setText("");
									
									gridSizeTextField.requestFocus();
								});
							
		buttonPane = new FlowPane();
		buttonPane.getChildren().add(acceptButton);
		buttonPane.getChildren().add(exitButton);
		
		mainPane = new BorderPane();
		mainPane.setCenter(radioButtonPane);
		mainPane.setBottom(buttonPane);
		
		
		Scene scene = new Scene(mainPane, 200, 200);
		primaryStage.setTitle("Tic Tac Toe");
		primaryStage.setScene(scene);
		primaryStage.show();
	}//end of setup
	
}//end of class
	
